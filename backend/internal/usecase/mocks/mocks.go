// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	config "github.com/CheesecakeLabs/token-factory-v2/backend/config"
	entity "github.com/CheesecakeLabs/token-factory-v2/backend/internal/entity"
	usecase "github.com/CheesecakeLabs/token-factory-v2/backend/internal/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), user)
}

// EditUsersRole mocks base method.
func (m *MockUserRepo) EditUsersRole(id_user, id_role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUsersRole", id_user, id_role)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUsersRole indicates an expected call of EditUsersRole.
func (mr *MockUserRepoMockRecorder) EditUsersRole(id_user, id_role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUsersRole", reflect.TypeOf((*MockUserRepo)(nil).EditUsersRole), id_user, id_role)
}

// GetAllUsers mocks base method.
func (m *MockUserRepo) GetAllUsers() ([]entity.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]entity.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserRepoMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserRepo)(nil).GetAllUsers))
}

// GetProfile mocks base method.
func (m *MockUserRepo) GetProfile(token string) (entity.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", token)
	ret0, _ := ret[0].(entity.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserRepoMockRecorder) GetProfile(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserRepo)(nil).GetProfile), token)
}

// GetSuperAdminUsers mocks base method.
func (m *MockUserRepo) GetSuperAdminUsers() ([]entity.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuperAdminUsers")
	ret0, _ := ret[0].([]entity.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuperAdminUsers indicates an expected call of GetSuperAdminUsers.
func (mr *MockUserRepoMockRecorder) GetSuperAdminUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperAdminUsers", reflect.TypeOf((*MockUserRepo)(nil).GetSuperAdminUsers))
}

// GetUser mocks base method.
func (m *MockUserRepo) GetUser(email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepoMockRecorder) GetUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepo)(nil).GetUser), email)
}

// GetUserByToken mocks base method.
func (m *MockUserRepo) GetUserByToken(token string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", token)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockUserRepoMockRecorder) GetUserByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockUserRepo)(nil).GetUserByToken), token)
}

// UpdateToken mocks base method.
func (m *MockUserRepo) UpdateToken(id, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", id, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockUserRepoMockRecorder) UpdateToken(id, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockUserRepo)(nil).UpdateToken), id, token)
}

// ValidateToken mocks base method.
func (m *MockUserRepo) ValidateToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockUserRepoMockRecorder) ValidateToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockUserRepo)(nil).ValidateToken), token)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Autentication mocks base method.
func (m *MockUser) Autentication(name, password string) (usecase.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Autentication", name, password)
	ret0, _ := ret[0].(usecase.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Autentication indicates an expected call of Autentication.
func (mr *MockUserMockRecorder) Autentication(name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Autentication", reflect.TypeOf((*MockUser)(nil).Autentication), name, password)
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), user)
}

// Detail mocks base method.
func (m *MockUser) Detail(email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockUserMockRecorder) Detail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockUser)(nil).Detail), email)
}

// MockWalletRepoInterface is a mock of WalletRepoInterface interface.
type MockWalletRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepoInterfaceMockRecorder
}

// MockWalletRepoInterfaceMockRecorder is the mock recorder for MockWalletRepoInterface.
type MockWalletRepoInterfaceMockRecorder struct {
	mock *MockWalletRepoInterface
}

// NewMockWalletRepoInterface creates a new mock instance.
func NewMockWalletRepoInterface(ctrl *gomock.Controller) *MockWalletRepoInterface {
	mock := &MockWalletRepoInterface{ctrl: ctrl}
	mock.recorder = &MockWalletRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepoInterface) EXPECT() *MockWalletRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateKey mocks base method.
func (m *MockWalletRepoInterface) CreateKey(arg0 entity.Key) (entity.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", arg0)
	ret0, _ := ret[0].(entity.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockWalletRepoInterfaceMockRecorder) CreateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockWalletRepoInterface)(nil).CreateKey), arg0)
}

// CreateWallet mocks base method.
func (m *MockWalletRepoInterface) CreateWallet(arg0 entity.Wallet) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletRepoInterfaceMockRecorder) CreateWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletRepoInterface)(nil).CreateWallet), arg0)
}

// CreateWalletWithKey mocks base method.
func (m *MockWalletRepoInterface) CreateWalletWithKey(arg0 entity.Wallet) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWalletWithKey", arg0)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWalletWithKey indicates an expected call of CreateWalletWithKey.
func (mr *MockWalletRepoInterfaceMockRecorder) CreateWalletWithKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWalletWithKey", reflect.TypeOf((*MockWalletRepoInterface)(nil).CreateWalletWithKey), arg0)
}

// GetKeyByWallet mocks base method.
func (m *MockWalletRepoInterface) GetKeyByWallet(arg0 int) (entity.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByWallet", arg0)
	ret0, _ := ret[0].(entity.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyByWallet indicates an expected call of GetKeyByWallet.
func (mr *MockWalletRepoInterfaceMockRecorder) GetKeyByWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByWallet", reflect.TypeOf((*MockWalletRepoInterface)(nil).GetKeyByWallet), arg0)
}

// GetWallet mocks base method.
func (m *MockWalletRepoInterface) GetWallet(arg0 int) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockWalletRepoInterfaceMockRecorder) GetWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockWalletRepoInterface)(nil).GetWallet), arg0)
}

// GetWallets mocks base method.
func (m *MockWalletRepoInterface) GetWallets(arg0 string) ([]entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets", arg0)
	ret0, _ := ret[0].([]entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets.
func (mr *MockWalletRepoInterfaceMockRecorder) GetWallets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockWalletRepoInterface)(nil).GetWallets), arg0)
}

// UpdateWallet mocks base method.
func (m *MockWalletRepoInterface) UpdateWallet(arg0 entity.Wallet) (entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", arg0)
	ret0, _ := ret[0].(entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockWalletRepoInterfaceMockRecorder) UpdateWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockWalletRepoInterface)(nil).UpdateWallet), arg0)
}

// MockAssetRepoInterface is a mock of AssetRepoInterface interface.
type MockAssetRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetRepoInterfaceMockRecorder
}

// MockAssetRepoInterfaceMockRecorder is the mock recorder for MockAssetRepoInterface.
type MockAssetRepoInterfaceMockRecorder struct {
	mock *MockAssetRepoInterface
}

// NewMockAssetRepoInterface creates a new mock instance.
func NewMockAssetRepoInterface(ctrl *gomock.Controller) *MockAssetRepoInterface {
	mock := &MockAssetRepoInterface{ctrl: ctrl}
	mock.recorder = &MockAssetRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetRepoInterface) EXPECT() *MockAssetRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateAsset mocks base method.
func (m *MockAssetRepoInterface) CreateAsset(arg0 entity.Asset) (entity.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", arg0)
	ret0, _ := ret[0].(entity.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockAssetRepoInterfaceMockRecorder) CreateAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockAssetRepoInterface)(nil).CreateAsset), arg0)
}

// GetAsset mocks base method.
func (m *MockAssetRepoInterface) GetAsset(arg0 int) (entity.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", arg0)
	ret0, _ := ret[0].(entity.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockAssetRepoInterfaceMockRecorder) GetAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockAssetRepoInterface)(nil).GetAsset), arg0)
}

// GetAssetByCode mocks base method.
func (m *MockAssetRepoInterface) GetAssetByCode(arg0 string) (entity.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetByCode", arg0)
	ret0, _ := ret[0].(entity.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetByCode indicates an expected call of GetAssetByCode.
func (mr *MockAssetRepoInterfaceMockRecorder) GetAssetByCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetByCode", reflect.TypeOf((*MockAssetRepoInterface)(nil).GetAssetByCode), arg0)
}

// GetAssetById mocks base method.
func (m *MockAssetRepoInterface) GetAssetById(arg0 string) (entity.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetById", arg0)
	ret0, _ := ret[0].(entity.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetById indicates an expected call of GetAssetById.
func (mr *MockAssetRepoInterfaceMockRecorder) GetAssetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetById", reflect.TypeOf((*MockAssetRepoInterface)(nil).GetAssetById), arg0)
}

// GetAssetImage mocks base method.
func (m *MockAssetRepoInterface) GetAssetImage(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetImage", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetImage indicates an expected call of GetAssetImage.
func (mr *MockAssetRepoInterfaceMockRecorder) GetAssetImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetImage", reflect.TypeOf((*MockAssetRepoInterface)(nil).GetAssetImage), arg0)
}

// GetAssets mocks base method.
func (m *MockAssetRepoInterface) GetAssets(arg0 entity.AssetFilter) ([]entity.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets", arg0)
	ret0, _ := ret[0].([]entity.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockAssetRepoInterfaceMockRecorder) GetAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockAssetRepoInterface)(nil).GetAssets), arg0)
}

// GetPaginatedAssets mocks base method.
func (m *MockAssetRepoInterface) GetPaginatedAssets(arg0, arg1 int, arg2 entity.AssetFilter) ([]entity.Asset, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedAssets", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Asset)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaginatedAssets indicates an expected call of GetPaginatedAssets.
func (mr *MockAssetRepoInterfaceMockRecorder) GetPaginatedAssets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedAssets", reflect.TypeOf((*MockAssetRepoInterface)(nil).GetPaginatedAssets), arg0, arg1, arg2)
}

// StoreAssetImage mocks base method.
func (m *MockAssetRepoInterface) StoreAssetImage(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAssetImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAssetImage indicates an expected call of StoreAssetImage.
func (mr *MockAssetRepoInterfaceMockRecorder) StoreAssetImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAssetImage", reflect.TypeOf((*MockAssetRepoInterface)(nil).StoreAssetImage), arg0, arg1)
}

// UpdateContractId mocks base method.
func (m *MockAssetRepoInterface) UpdateContractId(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContractId indicates an expected call of UpdateContractId.
func (mr *MockAssetRepoInterfaceMockRecorder) UpdateContractId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractId", reflect.TypeOf((*MockAssetRepoInterface)(nil).UpdateContractId), arg0, arg1)
}

// UpdateNameAndCode mocks base method.
func (m *MockAssetRepoInterface) UpdateNameAndCode(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNameAndCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNameAndCode indicates an expected call of UpdateNameAndCode.
func (mr *MockAssetRepoInterfaceMockRecorder) UpdateNameAndCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNameAndCode", reflect.TypeOf((*MockAssetRepoInterface)(nil).UpdateNameAndCode), arg0, arg1, arg2)
}

// MockRoleRepoInterface is a mock of RoleRepoInterface interface.
type MockRoleRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepoInterfaceMockRecorder
}

// MockRoleRepoInterfaceMockRecorder is the mock recorder for MockRoleRepoInterface.
type MockRoleRepoInterfaceMockRecorder struct {
	mock *MockRoleRepoInterface
}

// NewMockRoleRepoInterface creates a new mock instance.
func NewMockRoleRepoInterface(ctrl *gomock.Controller) *MockRoleRepoInterface {
	mock := &MockRoleRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRoleRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepoInterface) EXPECT() *MockRoleRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleRepoInterface) CreateRole(arg0 entity.RoleRequest) (entity.RoleRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0)
	ret0, _ := ret[0].(entity.RoleRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleRepoInterfaceMockRecorder) CreateRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleRepoInterface)(nil).CreateRole), arg0)
}

// DeleteRole mocks base method.
func (m *MockRoleRepoInterface) DeleteRole(arg0 entity.RoleDelete) (entity.RoleDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0)
	ret0, _ := ret[0].(entity.RoleDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRoleRepoInterfaceMockRecorder) DeleteRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleRepoInterface)(nil).DeleteRole), arg0)
}

// GetRoleById mocks base method.
func (m *MockRoleRepoInterface) GetRoleById(id int) (entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleById", id)
	ret0, _ := ret[0].(entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleById indicates an expected call of GetRoleById.
func (mr *MockRoleRepoInterfaceMockRecorder) GetRoleById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleById", reflect.TypeOf((*MockRoleRepoInterface)(nil).GetRoleById), id)
}

// GetRoles mocks base method.
func (m *MockRoleRepoInterface) GetRoles() ([]entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles")
	ret0, _ := ret[0].([]entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockRoleRepoInterfaceMockRecorder) GetRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockRoleRepoInterface)(nil).GetRoles))
}

// GetSuperAdminRole mocks base method.
func (m *MockRoleRepoInterface) GetSuperAdminRole() (entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuperAdminRole")
	ret0, _ := ret[0].(entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuperAdminRole indicates an expected call of GetSuperAdminRole.
func (mr *MockRoleRepoInterfaceMockRecorder) GetSuperAdminRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperAdminRole", reflect.TypeOf((*MockRoleRepoInterface)(nil).GetSuperAdminRole))
}

// UpdateRole mocks base method.
func (m *MockRoleRepoInterface) UpdateRole(arg0 entity.Role) (entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0)
	ret0, _ := ret[0].(entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleRepoInterfaceMockRecorder) UpdateRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleRepoInterface)(nil).UpdateRole), arg0)
}

// MockRolePermissionRepoInterface is a mock of RolePermissionRepoInterface interface.
type MockRolePermissionRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRolePermissionRepoInterfaceMockRecorder
}

// MockRolePermissionRepoInterfaceMockRecorder is the mock recorder for MockRolePermissionRepoInterface.
type MockRolePermissionRepoInterfaceMockRecorder struct {
	mock *MockRolePermissionRepoInterface
}

// NewMockRolePermissionRepoInterface creates a new mock instance.
func NewMockRolePermissionRepoInterface(ctrl *gomock.Controller) *MockRolePermissionRepoInterface {
	mock := &MockRolePermissionRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRolePermissionRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolePermissionRepoInterface) EXPECT() *MockRolePermissionRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateRolePermission mocks base method.
func (m *MockRolePermissionRepoInterface) CreateRolePermission(arg0 entity.RolePermissionRequest) (entity.RolePermissionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRolePermission", arg0)
	ret0, _ := ret[0].(entity.RolePermissionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRolePermission indicates an expected call of CreateRolePermission.
func (mr *MockRolePermissionRepoInterfaceMockRecorder) CreateRolePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRolePermission", reflect.TypeOf((*MockRolePermissionRepoInterface)(nil).CreateRolePermission), arg0)
}

// DeleteRolePermission mocks base method.
func (m *MockRolePermissionRepoInterface) DeleteRolePermission(arg0 entity.RolePermissionRequest) (entity.RolePermissionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermission", arg0)
	ret0, _ := ret[0].(entity.RolePermissionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRolePermission indicates an expected call of DeleteRolePermission.
func (mr *MockRolePermissionRepoInterfaceMockRecorder) DeleteRolePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermission", reflect.TypeOf((*MockRolePermissionRepoInterface)(nil).DeleteRolePermission), arg0)
}

// GetPermissions mocks base method.
func (m *MockRolePermissionRepoInterface) GetPermissions() ([]entity.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions")
	ret0, _ := ret[0].([]entity.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockRolePermissionRepoInterfaceMockRecorder) GetPermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockRolePermissionRepoInterface)(nil).GetPermissions))
}

// GetRolesPermissions mocks base method.
func (m *MockRolePermissionRepoInterface) GetRolesPermissions() ([]entity.RolePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesPermissions")
	ret0, _ := ret[0].([]entity.RolePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesPermissions indicates an expected call of GetRolesPermissions.
func (mr *MockRolePermissionRepoInterfaceMockRecorder) GetRolesPermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesPermissions", reflect.TypeOf((*MockRolePermissionRepoInterface)(nil).GetRolesPermissions))
}

// GetUserPermissions mocks base method.
func (m *MockRolePermissionRepoInterface) GetUserPermissions(token string) ([]entity.UserPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissions", token)
	ret0, _ := ret[0].([]entity.UserPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissions indicates an expected call of GetUserPermissions.
func (mr *MockRolePermissionRepoInterfaceMockRecorder) GetUserPermissions(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissions", reflect.TypeOf((*MockRolePermissionRepoInterface)(nil).GetUserPermissions), token)
}

// Validate mocks base method.
func (m *MockRolePermissionRepoInterface) Validate(action string, roleId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", action, roleId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockRolePermissionRepoInterfaceMockRecorder) Validate(action, roleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRolePermissionRepoInterface)(nil).Validate), action, roleId)
}

// MockTomlInterface is a mock of TomlInterface interface.
type MockTomlInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTomlInterfaceMockRecorder
}

// MockTomlInterfaceMockRecorder is the mock recorder for MockTomlInterface.
type MockTomlInterfaceMockRecorder struct {
	mock *MockTomlInterface
}

// NewMockTomlInterface creates a new mock instance.
func NewMockTomlInterface(ctrl *gomock.Controller) *MockTomlInterface {
	mock := &MockTomlInterface{ctrl: ctrl}
	mock.recorder = &MockTomlInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTomlInterface) EXPECT() *MockTomlInterfaceMockRecorder {
	return m.recorder
}

// GenerateToml mocks base method.
func (m *MockTomlInterface) GenerateToml(arg0 entity.TomlData, arg1 config.Horizon) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToml", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToml indicates an expected call of GenerateToml.
func (mr *MockTomlInterfaceMockRecorder) GenerateToml(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToml", reflect.TypeOf((*MockTomlInterface)(nil).GenerateToml), arg0, arg1)
}

// RetrieveToml mocks base method.
func (m *MockTomlInterface) RetrieveToml(arg0 string) (entity.TomlData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveToml", arg0)
	ret0, _ := ret[0].(entity.TomlData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveToml indicates an expected call of RetrieveToml.
func (mr *MockTomlInterfaceMockRecorder) RetrieveToml(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveToml", reflect.TypeOf((*MockTomlInterface)(nil).RetrieveToml), arg0)
}

// UpdateTomlData mocks base method.
func (m *MockTomlInterface) UpdateTomlData(arg0, arg1 entity.TomlData) (entity.TomlData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTomlData", arg0, arg1)
	ret0, _ := ret[0].(entity.TomlData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTomlData indicates an expected call of UpdateTomlData.
func (mr *MockTomlInterfaceMockRecorder) UpdateTomlData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTomlData", reflect.TypeOf((*MockTomlInterface)(nil).UpdateTomlData), arg0, arg1)
}

// MockTomlRepoInterface is a mock of TomlRepoInterface interface.
type MockTomlRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTomlRepoInterfaceMockRecorder
}

// MockTomlRepoInterfaceMockRecorder is the mock recorder for MockTomlRepoInterface.
type MockTomlRepoInterfaceMockRecorder struct {
	mock *MockTomlRepoInterface
}

// NewMockTomlRepoInterface creates a new mock instance.
func NewMockTomlRepoInterface(ctrl *gomock.Controller) *MockTomlRepoInterface {
	mock := &MockTomlRepoInterface{ctrl: ctrl}
	mock.recorder = &MockTomlRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTomlRepoInterface) EXPECT() *MockTomlRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateToml mocks base method.
func (m *MockTomlRepoInterface) CreateToml(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToml", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToml indicates an expected call of CreateToml.
func (mr *MockTomlRepoInterfaceMockRecorder) CreateToml(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToml", reflect.TypeOf((*MockTomlRepoInterface)(nil).CreateToml), arg0)
}

// GetToml mocks base method.
func (m *MockTomlRepoInterface) GetToml() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToml")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToml indicates an expected call of GetToml.
func (mr *MockTomlRepoInterfaceMockRecorder) GetToml() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToml", reflect.TypeOf((*MockTomlRepoInterface)(nil).GetToml))
}

// MockVaultCategoryRepoInterface is a mock of VaultCategoryRepoInterface interface.
type MockVaultCategoryRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVaultCategoryRepoInterfaceMockRecorder
}

// MockVaultCategoryRepoInterfaceMockRecorder is the mock recorder for MockVaultCategoryRepoInterface.
type MockVaultCategoryRepoInterfaceMockRecorder struct {
	mock *MockVaultCategoryRepoInterface
}

// NewMockVaultCategoryRepoInterface creates a new mock instance.
func NewMockVaultCategoryRepoInterface(ctrl *gomock.Controller) *MockVaultCategoryRepoInterface {
	mock := &MockVaultCategoryRepoInterface{ctrl: ctrl}
	mock.recorder = &MockVaultCategoryRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultCategoryRepoInterface) EXPECT() *MockVaultCategoryRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateVaultCategory mocks base method.
func (m *MockVaultCategoryRepoInterface) CreateVaultCategory(arg0 entity.VaultCategory) (entity.VaultCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVaultCategory", arg0)
	ret0, _ := ret[0].(entity.VaultCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVaultCategory indicates an expected call of CreateVaultCategory.
func (mr *MockVaultCategoryRepoInterfaceMockRecorder) CreateVaultCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVaultCategory", reflect.TypeOf((*MockVaultCategoryRepoInterface)(nil).CreateVaultCategory), arg0)
}

// GetVaultCategories mocks base method.
func (m *MockVaultCategoryRepoInterface) GetVaultCategories() ([]entity.VaultCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaultCategories")
	ret0, _ := ret[0].([]entity.VaultCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultCategories indicates an expected call of GetVaultCategories.
func (mr *MockVaultCategoryRepoInterfaceMockRecorder) GetVaultCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultCategories", reflect.TypeOf((*MockVaultCategoryRepoInterface)(nil).GetVaultCategories))
}

// GetVaultCategoryById mocks base method.
func (m *MockVaultCategoryRepoInterface) GetVaultCategoryById(id int) (entity.VaultCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaultCategoryById", id)
	ret0, _ := ret[0].(entity.VaultCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultCategoryById indicates an expected call of GetVaultCategoryById.
func (mr *MockVaultCategoryRepoInterfaceMockRecorder) GetVaultCategoryById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultCategoryById", reflect.TypeOf((*MockVaultCategoryRepoInterface)(nil).GetVaultCategoryById), id)
}

// MockVaultRepoInterface is a mock of VaultRepoInterface interface.
type MockVaultRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVaultRepoInterfaceMockRecorder
}

// MockVaultRepoInterfaceMockRecorder is the mock recorder for MockVaultRepoInterface.
type MockVaultRepoInterfaceMockRecorder struct {
	mock *MockVaultRepoInterface
}

// NewMockVaultRepoInterface creates a new mock instance.
func NewMockVaultRepoInterface(ctrl *gomock.Controller) *MockVaultRepoInterface {
	mock := &MockVaultRepoInterface{ctrl: ctrl}
	mock.recorder = &MockVaultRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultRepoInterface) EXPECT() *MockVaultRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateVault mocks base method.
func (m *MockVaultRepoInterface) CreateVault(arg0 entity.Vault) (entity.Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVault", arg0)
	ret0, _ := ret[0].(entity.Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVault indicates an expected call of CreateVault.
func (mr *MockVaultRepoInterfaceMockRecorder) CreateVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVault", reflect.TypeOf((*MockVaultRepoInterface)(nil).CreateVault), arg0)
}

// DeleteVault mocks base method.
func (m *MockVaultRepoInterface) DeleteVault(arg0 entity.Vault) (entity.Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVault", arg0)
	ret0, _ := ret[0].(entity.Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVault indicates an expected call of DeleteVault.
func (mr *MockVaultRepoInterfaceMockRecorder) DeleteVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVault", reflect.TypeOf((*MockVaultRepoInterface)(nil).DeleteVault), arg0)
}

// GetPaginatedVaults mocks base method.
func (m *MockVaultRepoInterface) GetPaginatedVaults(arg0, arg1 int) ([]entity.Vault, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedVaults", arg0, arg1)
	ret0, _ := ret[0].([]entity.Vault)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaginatedVaults indicates an expected call of GetPaginatedVaults.
func (mr *MockVaultRepoInterfaceMockRecorder) GetPaginatedVaults(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedVaults", reflect.TypeOf((*MockVaultRepoInterface)(nil).GetPaginatedVaults), arg0, arg1)
}

// GetVaultById mocks base method.
func (m *MockVaultRepoInterface) GetVaultById(id int) (entity.Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaultById", id)
	ret0, _ := ret[0].(entity.Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultById indicates an expected call of GetVaultById.
func (mr *MockVaultRepoInterfaceMockRecorder) GetVaultById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultById", reflect.TypeOf((*MockVaultRepoInterface)(nil).GetVaultById), id)
}

// GetVaults mocks base method.
func (m *MockVaultRepoInterface) GetVaults(isAll bool) ([]entity.Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaults", isAll)
	ret0, _ := ret[0].([]entity.Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaults indicates an expected call of GetVaults.
func (mr *MockVaultRepoInterfaceMockRecorder) GetVaults(isAll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaults", reflect.TypeOf((*MockVaultRepoInterface)(nil).GetVaults), isAll)
}

// UpdateVault mocks base method.
func (m *MockVaultRepoInterface) UpdateVault(arg0 entity.Vault) (entity.Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVault", arg0)
	ret0, _ := ret[0].(entity.Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVault indicates an expected call of UpdateVault.
func (mr *MockVaultRepoInterfaceMockRecorder) UpdateVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVault", reflect.TypeOf((*MockVaultRepoInterface)(nil).UpdateVault), arg0)
}

// MockContractRepoInterface is a mock of ContractRepoInterface interface.
type MockContractRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContractRepoInterfaceMockRecorder
}

// MockContractRepoInterfaceMockRecorder is the mock recorder for MockContractRepoInterface.
type MockContractRepoInterfaceMockRecorder struct {
	mock *MockContractRepoInterface
}

// NewMockContractRepoInterface creates a new mock instance.
func NewMockContractRepoInterface(ctrl *gomock.Controller) *MockContractRepoInterface {
	mock := &MockContractRepoInterface{ctrl: ctrl}
	mock.recorder = &MockContractRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractRepoInterface) EXPECT() *MockContractRepoInterfaceMockRecorder {
	return m.recorder
}

// AddContractHistory mocks base method.
func (m *MockContractRepoInterface) AddContractHistory(contractHistory entity.ContractHistory) (entity.ContractHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContractHistory", contractHistory)
	ret0, _ := ret[0].(entity.ContractHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContractHistory indicates an expected call of AddContractHistory.
func (mr *MockContractRepoInterfaceMockRecorder) AddContractHistory(contractHistory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContractHistory", reflect.TypeOf((*MockContractRepoInterface)(nil).AddContractHistory), contractHistory)
}

// CreateContract mocks base method.
func (m *MockContractRepoInterface) CreateContract(arg0 entity.Contract) (entity.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContract", arg0)
	ret0, _ := ret[0].(entity.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContract indicates an expected call of CreateContract.
func (mr *MockContractRepoInterfaceMockRecorder) CreateContract(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockContractRepoInterface)(nil).CreateContract), arg0)
}

// GetContractById mocks base method.
func (m *MockContractRepoInterface) GetContractById(id string) (entity.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractById", id)
	ret0, _ := ret[0].(entity.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractById indicates an expected call of GetContractById.
func (mr *MockContractRepoInterfaceMockRecorder) GetContractById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractById", reflect.TypeOf((*MockContractRepoInterface)(nil).GetContractById), id)
}

// GetContracts mocks base method.
func (m *MockContractRepoInterface) GetContracts() ([]entity.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContracts")
	ret0, _ := ret[0].([]entity.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContracts indicates an expected call of GetContracts.
func (mr *MockContractRepoInterfaceMockRecorder) GetContracts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContracts", reflect.TypeOf((*MockContractRepoInterface)(nil).GetContracts))
}

// GetHistory mocks base method.
func (m *MockContractRepoInterface) GetHistory(userId, contractId int) ([]entity.ContractHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", userId, contractId)
	ret0, _ := ret[0].([]entity.ContractHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockContractRepoInterfaceMockRecorder) GetHistory(userId, contractId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockContractRepoInterface)(nil).GetHistory), userId, contractId)
}

// GetPaginatedContracts mocks base method.
func (m *MockContractRepoInterface) GetPaginatedContracts(arg0, arg1 int) ([]entity.Contract, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedContracts", arg0, arg1)
	ret0, _ := ret[0].([]entity.Contract)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaginatedContracts indicates an expected call of GetPaginatedContracts.
func (mr *MockContractRepoInterfaceMockRecorder) GetPaginatedContracts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedContracts", reflect.TypeOf((*MockContractRepoInterface)(nil).GetPaginatedContracts), arg0, arg1)
}

// UpdateContractHistory mocks base method.
func (m *MockContractRepoInterface) UpdateContractHistory(contractHistory entity.ContractHistory) (entity.ContractHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractHistory", contractHistory)
	ret0, _ := ret[0].(entity.ContractHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContractHistory indicates an expected call of UpdateContractHistory.
func (mr *MockContractRepoInterfaceMockRecorder) UpdateContractHistory(contractHistory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractHistory", reflect.TypeOf((*MockContractRepoInterface)(nil).UpdateContractHistory), contractHistory)
}

// MockLogTransactionRepoInterface is a mock of LogTransactionRepoInterface interface.
type MockLogTransactionRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLogTransactionRepoInterfaceMockRecorder
}

// MockLogTransactionRepoInterfaceMockRecorder is the mock recorder for MockLogTransactionRepoInterface.
type MockLogTransactionRepoInterfaceMockRecorder struct {
	mock *MockLogTransactionRepoInterface
}

// NewMockLogTransactionRepoInterface creates a new mock instance.
func NewMockLogTransactionRepoInterface(ctrl *gomock.Controller) *MockLogTransactionRepoInterface {
	mock := &MockLogTransactionRepoInterface{ctrl: ctrl}
	mock.recorder = &MockLogTransactionRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogTransactionRepoInterface) EXPECT() *MockLogTransactionRepoInterfaceMockRecorder {
	return m.recorder
}

// GetLastLogTransactions mocks base method.
func (m *MockLogTransactionRepoInterface) GetLastLogTransactions(transactionTypeID int) ([]entity.LogTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLogTransactions", transactionTypeID)
	ret0, _ := ret[0].([]entity.LogTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastLogTransactions indicates an expected call of GetLastLogTransactions.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) GetLastLogTransactions(transactionTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLogTransactions", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).GetLastLogTransactions), transactionTypeID)
}

// GetLogTransactions mocks base method.
func (m *MockLogTransactionRepoInterface) GetLogTransactions(timeRange string) ([]entity.LogTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogTransactions", timeRange)
	ret0, _ := ret[0].([]entity.LogTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogTransactions indicates an expected call of GetLogTransactions.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) GetLogTransactions(timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogTransactions", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).GetLogTransactions), timeRange)
}

// GetLogTransactionsByAssetID mocks base method.
func (m *MockLogTransactionRepoInterface) GetLogTransactionsByAssetID(assetID int, timeRange string) ([]entity.LogTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogTransactionsByAssetID", assetID, timeRange)
	ret0, _ := ret[0].([]entity.LogTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogTransactionsByAssetID indicates an expected call of GetLogTransactionsByAssetID.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) GetLogTransactionsByAssetID(assetID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogTransactionsByAssetID", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).GetLogTransactionsByAssetID), assetID, timeRange)
}

// GetLogTransactionsByTransactionTypeID mocks base method.
func (m *MockLogTransactionRepoInterface) GetLogTransactionsByTransactionTypeID(transactionTypeID int, timeRange string) ([]entity.LogTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogTransactionsByTransactionTypeID", transactionTypeID, timeRange)
	ret0, _ := ret[0].([]entity.LogTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogTransactionsByTransactionTypeID indicates an expected call of GetLogTransactionsByTransactionTypeID.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) GetLogTransactionsByTransactionTypeID(transactionTypeID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogTransactionsByTransactionTypeID", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).GetLogTransactionsByTransactionTypeID), transactionTypeID, timeRange)
}

// GetLogTransactionsByUserID mocks base method.
func (m *MockLogTransactionRepoInterface) GetLogTransactionsByUserID(userID int, timeRange string) ([]entity.LogTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogTransactionsByUserID", userID, timeRange)
	ret0, _ := ret[0].([]entity.LogTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogTransactionsByUserID indicates an expected call of GetLogTransactionsByUserID.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) GetLogTransactionsByUserID(userID, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogTransactionsByUserID", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).GetLogTransactionsByUserID), userID, timeRange)
}

// LogTransactionSupplyByAssetID mocks base method.
func (m *MockLogTransactionRepoInterface) LogTransactionSupplyByAssetID(assetID int, timeRange, periodInitial, interval string) (entity.LogTransactionSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogTransactionSupplyByAssetID", assetID, timeRange, periodInitial, interval)
	ret0, _ := ret[0].(entity.LogTransactionSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogTransactionSupplyByAssetID indicates an expected call of LogTransactionSupplyByAssetID.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) LogTransactionSupplyByAssetID(assetID, timeRange, periodInitial, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogTransactionSupplyByAssetID", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).LogTransactionSupplyByAssetID), assetID, timeRange, periodInitial, interval)
}

// StoreLogTransaction mocks base method.
func (m *MockLogTransactionRepoInterface) StoreLogTransaction(arg0 entity.LogTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLogTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLogTransaction indicates an expected call of StoreLogTransaction.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) StoreLogTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLogTransaction", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).StoreLogTransaction), arg0)
}

// SumLogTransactionSupply mocks base method.
func (m *MockLogTransactionRepoInterface) SumLogTransactionSupply(timeRange string, timeFrame time.Duration) ([]entity.SumLogTransactionSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumLogTransactionSupply", timeRange, timeFrame)
	ret0, _ := ret[0].([]entity.SumLogTransactionSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumLogTransactionSupply indicates an expected call of SumLogTransactionSupply.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) SumLogTransactionSupply(timeRange, timeFrame interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumLogTransactionSupply", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).SumLogTransactionSupply), timeRange, timeFrame)
}

// SumLogTransactions mocks base method.
func (m *MockLogTransactionRepoInterface) SumLogTransactions(timeRange string, timeFrame time.Duration) ([]entity.SumLogTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumLogTransactions", timeRange, timeFrame)
	ret0, _ := ret[0].([]entity.SumLogTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumLogTransactions indicates an expected call of SumLogTransactions.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) SumLogTransactions(timeRange, timeFrame interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumLogTransactions", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).SumLogTransactions), timeRange, timeFrame)
}

// SumLogTransactionsByAssetID mocks base method.
func (m *MockLogTransactionRepoInterface) SumLogTransactionsByAssetID(assetID int, timeRange string, timeFrame time.Duration, transactionType int) (entity.SumLogTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumLogTransactionsByAssetID", assetID, timeRange, timeFrame, transactionType)
	ret0, _ := ret[0].(entity.SumLogTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumLogTransactionsByAssetID indicates an expected call of SumLogTransactionsByAssetID.
func (mr *MockLogTransactionRepoInterfaceMockRecorder) SumLogTransactionsByAssetID(assetID, timeRange, timeFrame, transactionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumLogTransactionsByAssetID", reflect.TypeOf((*MockLogTransactionRepoInterface)(nil).SumLogTransactionsByAssetID), assetID, timeRange, timeFrame, transactionType)
}

// MockAssetServiceInterface is a mock of AssetServiceInterface interface.
type MockAssetServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetServiceInterfaceMockRecorder
}

// MockAssetServiceInterfaceMockRecorder is the mock recorder for MockAssetServiceInterface.
type MockAssetServiceInterfaceMockRecorder struct {
	mock *MockAssetServiceInterface
}

// NewMockAssetServiceInterface creates a new mock instance.
func NewMockAssetServiceInterface(ctrl *gomock.Controller) *MockAssetServiceInterface {
	mock := &MockAssetServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAssetServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetServiceInterface) EXPECT() *MockAssetServiceInterfaceMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockAssetServiceInterface) UploadFile(arg0 string, arg1 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockAssetServiceInterfaceMockRecorder) UploadFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockAssetServiceInterface)(nil).UploadFile), arg0, arg1)
}
