version: '3.7'

services:
  postgres:
    container_name: postgres
    profiles: ["tests"]
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - stellar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
  
  backend:
    platform: linux/amd64
    profiles: ["all", "starlabs" , "tests"]
    container_name: token-factory-v2
    build:
      context: ./backend
      dockerfile: dev.Dockerfile
    image: mullberry-backend
    networks:
      - stellar-network
    ports:
      - "8080:8080"
    volumes:
      - ./:/go/src/CheesecakeLabs/token-factory-v2/backend
    depends_on:
      postgres:
        condition: service_healthy

  stellar-kms:
    platform: linux/amd64
    profiles: ["all", "starlabs" , "tests"]
    container_name: kms
    networks:
      - stellar-network
    build:
      context: ./stellar-kms
      dockerfile: dev.Dockerfile
    volumes:
      - '.:/workspace'
    environment:
      KAFKA_CLIENT_GROUP_ID: ${KAFKA_CLIENT_GROUP_ID:-starlabs}
      KAFKA_CLIENT_BROKERS: ${KAFKA_CLIENT_BROKERS:-broker:9092}
      KAFKA_CONSUMER_TOPICS: ${KAFKA_CONSUMER_TOPICS:-consumer_topic}
      KAFKA_PRODUCER_TOPIC: ${KAFKA_PRODUCER_TOPIC:-producer_topic}
      KAFKA_SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMA_REGISTRY_URL:-http://schema_registry:8085}
      PG_HOST: ${PG_HOST:-postgres}
      PG_PORT: ${PG_PORT:-5432}
      PG_USER: ${PG_USER:-postgres}
      PG_PASSWORD: ${PG_PASSWORD:-password}
      PG_DB_NAME: ${PG_DATABASE:-postgres}
      MASTER_KEY: ${MASTER_KEY:-da52f130e6fd477256b0c554aba89503}
    depends_on:
      postgres:
        condition: service_healthy


  #Kafka - Zookeeper#
  zookeeper:
    profiles: ["all", "kafka", "starlabs" , "tests"]
    image: confluentinc/cp-zookeeper:7.1.2
    networks:
      - stellar-network
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      retries: 20
      interval: 10s

  #Kafka - Broker#
  broker:
    profiles: ["all", "kafka", "starlabs" , "tests"]
    image: confluentinc/cp-kafka:7.1.2
    container_name: broker
    networks:
      - stellar-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 20
    depends_on:
      zookeeper:
        condition: service_healthy

  ## Kafka Init ##
  kafka-init:
    image: confluentinc/cp-kafka:7.1.2
    profiles: ["all", "kafka", "starlabs" , "tests"]
    container_name: kafka-init
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - stellar-network
    environment:
      KAFKA_CONSUMER_TOPICS: ${KAFKA_CONSUMER_TOPICS:-consumer_topic}
      KAFKA_PRODUCER_TOPICS: ${KAFKA_PRODUCER_TOPICS:-producer_topic}
    depends_on:
      broker:
        condition: service_healthy
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:9092 --list
      kafka-topics --create --topic $$KAFKA_CONSUMER_TOPICS --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server broker:9092
      kafka-topics --create --topic $$KAFKA_PRODUCER_TOPICS --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server broker:9092
      broker cub kafka-ready -b localhost:29092 1 20
      "

  #Starlabs Service#
  starlabs:
    platform: linux/amd64
    profiles: ["all", "starlabs" , "tests"]
    container_name: starlabs
    networks:
      - stellar-network
    build:
      context: ./starlabs
      dockerfile: dev.Dockerfile
    volumes:
      - '.:/workspace'
    environment:
      KAFKA_CLIENT_GROUP_ID: ${KAFKA_CLIENT_GROUP_ID:-starlabs}
      KAFKA_CLIENT_BROKERS: ${KAFKA_CLIENT_BROKERS:-broker:9092}
      KAFKA_CONSUMER_TOPICS: ${KAFKA_CONSUMER_TOPICS:-consumer_topic}
      KAFKA_PRODUCER_TOPIC: ${KAFKA_PRODUCER_TOPIC:-producer_topic}
      KAFKA_SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMA_REGISTRY_URL:-http://schema_registry:8085}
    depends_on:
      broker:
        condition: service_healthy
      zookeeper:
        condition: service_healthy

  integration:
    profiles: ["tests" ]
    platform: linux/amd64
    networks:
      - stellar-network
    build:
      context: ./backend
      dockerfile: integration-test/Dockerfile
    container_name: integration
    image: integration
    depends_on:
      - backend
      - stellar-kms
      - starlabs

volumes:
    postgres:

networks:
  stellar-network: